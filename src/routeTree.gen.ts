/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as ExamplesScene2Import } from "./routes/examples/scene2";
import { Route as ExamplesScene1Import } from "./routes/examples/scene1";
import { Route as DocsOverviewImport } from "./routes/docs/overview";
import { Route as DocsInstallationImport } from "./routes/docs/installation";
import { Route as DocsCreatingASceneImport } from "./routes/docs/creating-a-scene";

// Create/Update Routes

const ExamplesScene2Route = ExamplesScene2Import.update({
  id: "/examples/scene2",
  path: "/examples/scene2",
  getParentRoute: () => rootRoute,
} as any);

const ExamplesScene1Route = ExamplesScene1Import.update({
  id: "/examples/scene1",
  path: "/examples/scene1",
  getParentRoute: () => rootRoute,
} as any);

const DocsOverviewRoute = DocsOverviewImport.update({
  id: "/docs/overview",
  path: "/docs/overview",
  getParentRoute: () => rootRoute,
} as any);

const DocsInstallationRoute = DocsInstallationImport.update({
  id: "/docs/installation",
  path: "/docs/installation",
  getParentRoute: () => rootRoute,
} as any);

const DocsCreatingASceneRoute = DocsCreatingASceneImport.update({
  id: "/docs/creating-a-scene",
  path: "/docs/creating-a-scene",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/docs/creating-a-scene": {
      id: "/docs/creating-a-scene";
      path: "/docs/creating-a-scene";
      fullPath: "/docs/creating-a-scene";
      preLoaderRoute: typeof DocsCreatingASceneImport;
      parentRoute: typeof rootRoute;
    };
    "/docs/installation": {
      id: "/docs/installation";
      path: "/docs/installation";
      fullPath: "/docs/installation";
      preLoaderRoute: typeof DocsInstallationImport;
      parentRoute: typeof rootRoute;
    };
    "/docs/overview": {
      id: "/docs/overview";
      path: "/docs/overview";
      fullPath: "/docs/overview";
      preLoaderRoute: typeof DocsOverviewImport;
      parentRoute: typeof rootRoute;
    };
    "/examples/scene1": {
      id: "/examples/scene1";
      path: "/examples/scene1";
      fullPath: "/examples/scene1";
      preLoaderRoute: typeof ExamplesScene1Import;
      parentRoute: typeof rootRoute;
    };
    "/examples/scene2": {
      id: "/examples/scene2";
      path: "/examples/scene2";
      fullPath: "/examples/scene2";
      preLoaderRoute: typeof ExamplesScene2Import;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/docs/creating-a-scene": typeof DocsCreatingASceneRoute;
  "/docs/installation": typeof DocsInstallationRoute;
  "/docs/overview": typeof DocsOverviewRoute;
  "/examples/scene1": typeof ExamplesScene1Route;
  "/examples/scene2": typeof ExamplesScene2Route;
}

export interface FileRoutesByTo {
  "/docs/creating-a-scene": typeof DocsCreatingASceneRoute;
  "/docs/installation": typeof DocsInstallationRoute;
  "/docs/overview": typeof DocsOverviewRoute;
  "/examples/scene1": typeof ExamplesScene1Route;
  "/examples/scene2": typeof ExamplesScene2Route;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/docs/creating-a-scene": typeof DocsCreatingASceneRoute;
  "/docs/installation": typeof DocsInstallationRoute;
  "/docs/overview": typeof DocsOverviewRoute;
  "/examples/scene1": typeof ExamplesScene1Route;
  "/examples/scene2": typeof ExamplesScene2Route;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/docs/creating-a-scene"
    | "/docs/installation"
    | "/docs/overview"
    | "/examples/scene1"
    | "/examples/scene2";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/docs/creating-a-scene"
    | "/docs/installation"
    | "/docs/overview"
    | "/examples/scene1"
    | "/examples/scene2";
  id:
    | "__root__"
    | "/docs/creating-a-scene"
    | "/docs/installation"
    | "/docs/overview"
    | "/examples/scene1"
    | "/examples/scene2";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  DocsCreatingASceneRoute: typeof DocsCreatingASceneRoute;
  DocsInstallationRoute: typeof DocsInstallationRoute;
  DocsOverviewRoute: typeof DocsOverviewRoute;
  ExamplesScene1Route: typeof ExamplesScene1Route;
  ExamplesScene2Route: typeof ExamplesScene2Route;
}

const rootRouteChildren: RootRouteChildren = {
  DocsCreatingASceneRoute: DocsCreatingASceneRoute,
  DocsInstallationRoute: DocsInstallationRoute,
  DocsOverviewRoute: DocsOverviewRoute,
  ExamplesScene1Route: ExamplesScene1Route,
  ExamplesScene2Route: ExamplesScene2Route,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/docs/creating-a-scene",
        "/docs/installation",
        "/docs/overview",
        "/examples/scene1",
        "/examples/scene2"
      ]
    },
    "/docs/creating-a-scene": {
      "filePath": "docs/creating-a-scene.tsx"
    },
    "/docs/installation": {
      "filePath": "docs/installation.tsx"
    },
    "/docs/overview": {
      "filePath": "docs/overview.tsx"
    },
    "/examples/scene1": {
      "filePath": "examples/scene1.tsx"
    },
    "/examples/scene2": {
      "filePath": "examples/scene2.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
